<script type='text/javascript' src='framebuffer.js'></script>
<script type='text/javascript' src='particles.js'></script>
<script type='text/javascript' src='quad.js'></script>
<script type='text/javascript' src='cube.js'></script>
<script type='text/javascript' src='staticgeometry.js'></script>
<script type='text/javascript' src='camera.js'></script>
<script type='text/javascript' src='vec2.js'></script>
<script type='text/javascript' src='vec3.js'></script>
<script type='text/javascript' src='vec4.js'></script>
<script type='text/javascript' src='mat4.js'></script>
<!--<script type='text/x-fragment' src='shaders/test.fs'></script>
<script type='text/x-vertex' src='shaders/test.vs'></script>-->

<script type='text/x-vertex' name='test'>#version 300 es
layout(location = 0) in vec2 a0;
out vec2 p;

void main()
{
	gl_Position = vec4(a0, 0.0, 1.0);
	p = a0.xy * 0.5 + 0.5;
}
</script>

<script type='text/x-vertex' name='particleBasic'>#version 300 es
layout(location = 0) in highp vec3 position;
layout(location = 1) in highp vec3 velocity;
out highp float point_size;
flat out int id;
uniform highp mat4 mvp;
//in highp int gl_VertexID;

void main()
{
	gl_Position = mvp * vec4(position, 1.0);
	point_size = gl_Position.w * 1.25;//32.0 / (position.z * 0.5 + 0.5 + 1.0);
	gl_PointSize = point_size;
	id = int(position.x * position.y * position.z * 12345934.0);//gl_VertexID
	//id = gl_VertexID;
}
</script>

<script type='text/x-fragment' name='test'>#version 300 es
precision highp int;
precision highp float;
layout(location = 0) out lowp vec4 frag_color;
uniform highp vec2 screen_size;
uniform highp vec2 inverse_screen_size;
uniform highp float time;
uniform sampler2D screen;
in vec2 p;

void main()
{
	frag_color = texture(screen, p);
}
</script>

<script type='text/x-fragment' name='particleFlat'>#version 300 es
precision highp int;
precision highp float;
layout(location = 0) out lowp vec4 frag_color;
in highp float point_size;
flat in int id;

vec3 palette(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d){return a + b * cos(6.283185307179586 * (c * t + d));}

void main()
{ 
	highp float alpha = 0.5 * clamp(min(1.0, point_size * 0.5 - length(gl_PointCoord * point_size - point_size * 0.5)), 0.0, 1.0);
	if (alpha <= 0.0)
		discard;
	vec3 col = vec3(1.0) - palette(fract(float(id) / 232.234643), vec3(.03453212, .2359, .34966), vec3(.745674567,.223452345,.75564), vec3(.123412345,.7385,.12354346), vec3(.23456234,.3456234,.1346));
	frag_color = vec4(col * alpha, alpha);
}
</script>

<script type='text/x-vertex' name='flat'>#version 300 es
layout(location = 0) in highp vec3 position;
layout(location = 1) in highp vec3 normal;
layout(location = 2) in highp vec2 uv;
out highp vec3 n;
uniform highp mat4 mvp, mv;

void main()
{
	gl_Position = mvp * vec4(position, 1.0);
	n = (mv * vec4(normal, 0.0)).xyz;
}
</script>

<script type='text/x-fragment' name='flat'>#version 300 es
layout(location = 0) out lowp vec4 frag_color;
precision highp int;
precision highp float;
in vec3 n;

void main()
{ 
	frag_color = vec4(normalize(n) * 0.5 + 0.5, 0.0);
}
</script>

<script type='text/x-fragment' name='srgb'>#version 300 es
precision highp float;
vec3 LinearTosRGB(vec3 c)
{ 
	return vec3(
		c.r <= 0.0031308 ? 12.92 * c.r : 1.055 * pow(c.r, 1.0 / 2.4) - 0.055,
		c.g <= 0.0031308 ? 12.92 * c.g : 1.055 * pow(c.g, 1.0 / 2.4) - 0.055,
		c.b <= 0.0031308 ? 12.92 * c.b : 1.055 * pow(c.b, 1.0 / 2.4) - 0.055);
}

vec3 sRGBToLinear(vec3 c)
{
	return vec3(
		c.r <= 0.04045 ? c.r / 12.92 : pow(c.r / 1.055 + 0.055 / 1.055, 2.4),
		c.g <= 0.04045 ? c.g / 12.92 : pow(c.g / 1.055 + 0.055 / 1.055, 2.4),
		c.b <= 0.04045 ? c.b / 12.92 : pow(c.b / 1.055 + 0.055 / 1.055, 2.4));
}
</script>

<script>
'use strict'

let shaderPrograms = {
	'test': {
		'fragment': ['test'],
		'vertex': ['test'],
		'uniforms': {
			'screen_size': null,
			'inverse_screen_size': null,
			'time': null,
			'screen': null
		}
	},

	'particles0': {
		'fragment': ['particleFlat'],
		'vertex': ['particleBasic'],
		'uniforms': {
			'mvp': null
		}
	},

	'flat': {
		'fragment': ['flat'],
		'vertex': ['flat'],
		'uniforms': {
			'mvp': null,
			'mv': null,
		}
	}
}

let canvas = null
let gl = null
let frame = 0
let time = 0.0

let pointLights = []

function compileShader(shaderSource, shaderType) {
	if (shaderType == 'vertex')
		shaderType = gl.VERTEX_SHADER
	else if (shaderType == 'fragment')
		shaderType = gl.FRAGMENT_SHADER

	let shader = gl.createShader(shaderType)
	gl.shaderSource(shader, shaderSource)
	gl.compileShader(shader)

	if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
    console.log(gl.getShaderInfoLog(shader))
		gl.deleteShader(shader)
		return null
  }

	return shader
}

function createLightClusters(camera) {
	const x = 16
	const y = 9
	const z = 32

	for (let i in pointLights) {
		let r = pointLights[i].color.max()
	}
}

function linkProgram(shaders, attribs) {
	let program = gl.createProgram()
	for (let shader in shaders) {
		gl.attachShader(program, shaders[shader])
	}

	gl.linkProgram(program)

	if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
      console.log(gl.getProgramInfoLog(program))
			gl.deleteProgram(program)
			return null
  }

	return program
}

let particles = null

function load() {
	const shaderTypes = ['fragment', 'vertex']
	let compiledShader = { vertex: {}, fragment: {}}
	let scripts = document.getElementsByTagName('script')
	
	for (let script in scripts) {
		for (let i in shaderTypes) {
			let shaderType = shaderTypes[i]
			if (scripts[script].type == ('text/x-' + shaderType)) {
				let name = scripts[script].getAttribute('name')
				console.log(name, shaderType)
				compiledShader[shaderType][name] = compileShader(scripts[script].firstChild.nodeValue, shaderType)
			}
		}
	}

	for (let program in shaderPrograms) {
		let shaders = []
		for (let i in shaderTypes) {
			let shaderType = shaderTypes[i]
			for (let shader in shaderPrograms[program][shaderType]) {
				shaders.push(compiledShader[shaderType][shaderPrograms[program][shaderType][shader]])
			}
		}
		shaderPrograms[program].program = linkProgram(shaders)
		if (!shaderPrograms[program].program) {
			return false
		}

		for (let uniform in shaderPrograms[program].uniforms) {
			shaderPrograms[program].uniforms[uniform] = gl.getUniformLocation(shaderPrograms[program].program, uniform)
		}
	}

	quad.init()
	cube.init()
	particles = new Particles(50000)

	for (let i = 0; i < 4096; ++i) {
		pointLights.push({
			position: new Vec3(Math.random() * 100.0 - 50.0, Math.random() * 50.0, Math.random() * 100.0 - 50.0),
			color: new Vec3(Math.random() * 10.0, Math.random() * 10.0, Math.random() * 10.0)
		})
	}

	return true
}

let camera = new Camera(Math.PI / 4.0, 1.0, 0.1, 100.0)

function renderLoop(frameTime) {
	let dt = (frameTime - time) * 0.001
	time = frameTime * 0.001

	//

	camera.aspect = canvas.offsetWidth / canvas.offsetHeight
	//camera.focalLength = 8.0
	camera.updateProjection()
	camera.lookAt(new Vec3(Math.cos(time * 0.1) * 5.0, 0.0, Math.sin(time * 0.1) * 5.0), new Vec3(0.0, 0.0, 0.0), new Vec3(0.0, 1.0, 0.0))
	camera.update()

	framebuffer.bind()
	gl.clear(gl.COLOR_BUFFER_BIT)

	gl.enable(gl.CULL_FACE)
	gl.useProgram(shaderPrograms['flat'].program)
	gl.uniformMatrix4fv(shaderPrograms['flat'].uniforms['mvp'], false, camera.mvp)
	gl.uniformMatrix4fv(shaderPrograms['flat'].uniforms['mv'], false, camera.view)
	cube.draw()
	gl.disable(gl.CULL_FACE)

	gl.enable(gl.BLEND)
	//gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA)
	gl.blendFunc(gl.ONE, gl.ONE)
	gl.useProgram(shaderPrograms['particles0'].program)
	gl.uniformMatrix4fv(shaderPrograms['particles0'].uniforms['mvp'], false, camera.mvp)
	particles.draw()
	gl.disable(gl.BLEND)

	//

	gl.bindFramebuffer(gl.FRAMEBUFFER, null)
	gl.drawBuffers([gl.BACK])
	gl.viewport(0.0, 0.0, canvas.width, canvas.height)

	gl.activeTexture(gl.TEXTURE0)
	gl.bindTexture(gl.TEXTURE_2D, framebuffer.textureHdr)

	gl.useProgram(shaderPrograms['test'].program)
	gl.uniform1f(shaderPrograms['test'].uniforms['time'], time)
	gl.uniform2f(shaderPrograms['test'].uniforms['inverse_screen_size'], 1.0 / canvas.width, 1.0 / canvas.height)
	gl.uniform2f(shaderPrograms['test'].uniforms['screen_size'], canvas.width, canvas.height)
	gl.uniform1i(shaderPrograms['test'].uniforms['screen'], 0)
	quad.draw()

	++frame
	window.requestAnimationFrame(renderLoop)
}

function resize() {
	canvas.width = window.innerWidth
	canvas.height = window.innerHeight

	framebuffer.init(canvas.width, canvas.height)
}

window.addEventListener('load', () => {
	canvas = document.createElement('canvas')
	canvas.style.width = '100%'
	canvas.style.height = '100%'
	canvas.style.top = '0'
	canvas.style.left = '0'
	canvas.style.position = 'fixed'
	//canvas.style.padding = '0'
	//canvas.style.zIndex = '-1'

	gl = canvas.getContext('webgl2', {alpha: false, depth: false, stencil: false, antialias: false})
	if (gl == null) {
		alert('WebGL 2.0 not supported apparently.\n' +
			'Check if it is enabled if you think this should work.')
		return
	}

	resize()
	window.addEventListener('resize', resize)

	document.body.appendChild(canvas)

	if (!load()) {
		alert('Loading failed.\n' +
			'This shouldn\'t happen. It\'s probably a bug.')
		return
	}

	renderLoop(0.0)
})
</script>
